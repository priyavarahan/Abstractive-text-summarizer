# -*- coding: utf-8 -*-
"""Final BiLSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e869KMcDtf3edKboWBqGtjbOEBO_QZVU
"""

from google.colab import drive
drive.mount('/content/drive')

#Import the Libraries
import numpy as np
import pandas as pd
import re
from bs4 import BeautifulSoup
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from nltk.corpus import stopwords
from tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import EarlyStopping
import warnings
pd.set_option("display.max_colwidth", 200)
warnings.filterwarnings("ignore")

# Read the dataset
dataset=pd.read_csv("/content/drive/My Drive/Reviews.csv",nrows=100000)

# Drop duplication/empaty values
dataset.drop_duplicates(subset=['Text'],inplace=True)
dataset.dropna(axis=0,inplace=True)

# The dictionary that we will use for expanding the contractions:
contrac_words = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",
                "didn't": "did not",  "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",
                "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",
                "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",
                "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",
                "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",
                "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",
                "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",
                "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",
                "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",
                "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",
                "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",
                "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",
                "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",
                "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",
                "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",
                "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",
                "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",
                "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",
                "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",
                "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",
                "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",
                "you're": "you are", "you've": "you have"}

# Data-preprocessing
import nltk
nltk.download('stopwords')

# Remove stopwords
stop_words = set(stopwords.words('english'))

def cleaner_txt(txt, num):
    string = txt.lower() # convert into lowercase
    string = BeautifulSoup(string, "lxml").text # remove HTML tags
    string = re.sub(r'\n', '', string) # remove newline characters
    string = re.sub('"', '', string) # remove double quotes
    string = ' '.join([contrac_words[t] if t in contrac_words else t for t in string.split(" ")]) # contraction mapping
    string = re.sub(r"'s\b", "", string) # remove 's
    string = re.sub("[^a-zA-Z]", " ", string) # Remove any text inside the parenthesis
    string = re.sub('[m]{2,}', 'mm', string)
    if num == 0:
        tokens = [w for w in string.split() if not w in stop_words]
    else:
        tokens = string.split()
    long_words = []
    for i in tokens:
        if len(i) > 1:
            long_words.append(i)
    return (" ".join(long_words)).strip()

#call the function
txt_cleaned = []
for t in dataset['Text']:
    txt_cleaned.append(cleaner_txt(t,0))
summary_cleaned = []
for t in dataset['Summary']:
    summary_cleaned.append(cleaner_txt(t,1))

dataset['txt_cleaned']=txt_cleaned
dataset['summary_cleaned']=summary_cleaned
#Drop empty rows
dataset.replace('', np.nan, inplace=True)
dataset.dropna(axis=0,inplace=True)

#analyze the length of the reviews and the summary to get an overall idea about the distribution of length of the text.
import matplotlib.pyplot as plt
word_count_text = []
word_count_summary = []
# populate the lists with sentence lengths
for i in dataset['txt_cleaned']:
      word_count_text.append(len(i.split()))

for i in dataset['summary_cleaned']:
      word_count_summary.append(len(i.split()))

len_dataframe = pd.DataFrame({'txt':word_count_text, 'summary':word_count_summary})
len_dataframe.hist(bins = 30)
plt.show()

count=0
for i in dataset['summary_cleaned']:
    if(len(i.split())<=8):
        count=count+1
print(count/len(dataset['summary_cleaned']))

# fix the maximum length of review to 150
max_len_txt=512
max_len_summary=150

# select the reviews and summaries whose length falls below or equal to **max_len_txt** and **max_len_summary**
txt_cleaned =np.array(dataset['txt_cleaned'])
summary_cleaned=np.array(dataset['summary_cleaned'])

txt_short=[]
summary_short=[]
for i in range(len(txt_cleaned)):
    if(len(summary_cleaned[i].split())<=max_len_summary and len(txt_cleaned[i].split())<=max_len_txt):
        txt_short.append(txt_cleaned[i])
        summary_short.append(summary_cleaned[i])

dataframe=pd.DataFrame({'txt':txt_short,'summary':summary_short})

# add the **START** and **END** special tokens at the beginning and end of the summary.
dataframe['summary'] = dataframe['summary'].apply(lambda x : 'sostok '+ x + ' eostok')

#splitting the dataset
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(np.array(dataframe['txt']),np.array(dataframe['summary']),test_size=0.1,random_state=0,shuffle=True)

#Text Tokenizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

# tokenizer for training dataset
tokenizer_x = Tokenizer()
tokenizer_x.fit_on_texts(list(x_train))

#Summary Tokenizer
# tokenizer for training dataset
tokenizer_x = Tokenizer(num_words=count)
tokenizer_x.fit_on_texts(list(x_train))

#convert text sequences into integer sequences
x_tr_seq    =   tokenizer_x.texts_to_sequences(x_train)
x_val_seq   =   tokenizer_x.texts_to_sequences(x_test)

#padding zero to maximum length
x_train    =   pad_sequences(x_tr_seq,  maxlen=max_len_txt, padding='post')
x_test   =   pad_sequences(x_val_seq, maxlen=max_len_txt, padding='post')

#size of vocabulary ( +1 for padding token)
x_voc   =  tokenizer_x.num_words + 1

#tokenizer for training dataset
tokenizer_y = Tokenizer()
tokenizer_y.fit_on_texts(list(y_train))

# Define the tokenizer with top most common words for SUMMARY.
#tokenizer for training dataset
tokenizer_y = Tokenizer(num_words=count)
tokenizer_y.fit_on_texts(list(y_train))

#convert text to integer
y_train_seq    =   tokenizer_y.texts_to_sequences(y_train)
y_test_seq   =   tokenizer_y.texts_to_sequences(y_test)

# padding zero to maximum
y_train    =   pad_sequences(y_train_seq, maxlen=max_len_summary, padding='post')
y_test   =   pad_sequences(y_test_seq, maxlen=max_len_summary, padding='post')

# size of vocabulary
y_vocab  =   tokenizer_y.num_words +1

#check whether word count of start token is equal to length of the training dataset
tokenizer_y.word_counts['sostok'],len(y_train)

# deleting the rows that contain only START and END tokens for training set
index=[]
for i in range(len(y_train)):
    count=0
    for j in y_train[i]:
        if j!=0:
            count=count+1
    if(count==2):
        index.append(i)
y_train=np.delete(y_train,index, axis=0)
x_train=np.delete(x_train,index, axis=0)

# deleting the rows that contain only START and END tokens for testing set
index=[]
for i in range(len(y_test)):
    count=0
    for j in y_test[i]:
        if j!=0:
            count=count+1
    if(count==2):
        index.append(i)
y_test=np.delete(y_test,index, axis=0)
x_test=np.delete(x_test,index, axis=0)

import tensorflow as tf
from tensorflow.python.keras.layers import Layer
from tensorflow.python.keras import backend as K

class AttentionLayer(Layer):
    def __init__(self, **kwargs):
        super(AttentionLayer, self).__init__(**kwargs)

    def build(self, input_shape):
        super(AttentionLayer, self).build(input_shape)

    def call(self, inputs):
        assert isinstance(inputs, list) and len(inputs) == 2
        encoder_out_seq, decoder_out_seq = inputs

        attention_scores = tf.matmul(decoder_out_seq, encoder_out_seq, transpose_b=True)
        attention_weights = tf.nn.softmax(attention_scores, axis=-1)
        context_vector = tf.matmul(attention_weights, encoder_out_seq)

        return context_vector, attention_weights

    def compute_output_shape(self, input_shape):
        return [
            input_shape[1][:2],  # context_vector shape
            input_shape[1][:2]   # attention_weights shape
        ]

from keras import backend as K
K.clear_session()

from keras.layers import Input, Embedding, Bidirectional, LSTM, Concatenate, TimeDistributed, Dense
from keras.models import Model

dim_latent = 300
dim_emb = 100

# Encoder
en_input = Input(shape=(max_len_txt,))
en_embedding = Embedding(x_voc, dim_emb, trainable=True)(en_input)

# BiLSTM 1
en_lstm1 = Bidirectional(LSTM(dim_latent, return_sequences=True, dropout=0.4, recurrent_dropout=0.4, return_state=True))
en_output1, fw_state_h1, fw_state_c1, bw_state_h1, bw_state_c1 = en_lstm1(en_embedding)

# BiLSTM 2
en_lstm2 = Bidirectional(LSTM(dim_latent, return_sequences=True, dropout=0.4, recurrent_dropout=0.4, return_state=True))
en_output2, fw_state_h2, fw_state_c2, bw_state_h2, bw_state_c2 = en_lstm2(en_output1)

# BiLSTM 3
en_lstm3 = Bidirectional(LSTM(dim_latent, return_sequences=True, dropout=0.4, recurrent_dropout=0.4, return_state=True))
en_outputs, fw_state_h, fw_state_c, bw_state_h, bw_state_c = en_lstm3(en_output2)

# Set up the decoder
dec_input = Input(shape=(None,))
emb_layer_dec = Embedding(y_vocab, dim_emb, trainable=True)
dec_embedding = emb_layer_dec(dec_input)

dec_lstm = LSTM(dim_latent * 2, return_sequences=True, return_state=True, dropout=0.4, recurrent_dropout=0.2)
dec_output, dec_state_h, dec_state_c = dec_lstm(dec_embedding, initial_state=[
    Concatenate()([fw_state_h, bw_state_h]),
    Concatenate()([fw_state_c, bw_state_c])
])

# Attention layer
attention_layer = AttentionLayer(name='attention_layer')
attention_output, attention_states = attention_layer([en_outputs, dec_output])

# Concatenate attention input and decoder LSTM output
dec_concate_input = Concatenate(axis=-1, name='concat_layer')([dec_output, attention_output])

# Dense layer
dec_dense = TimeDistributed(Dense(y_vocab, activation='softmax'))
dec_output = dec_dense(dec_concate_input)

# Define the model
model = Model([en_input, dec_input]
              , dec_output)
model.summary()

# Check the shapes of few-shot examples and test data
print("Few-shot texts shape:", few_shot_texts_padded.shape)
print("Few-shot summaries shape:", few_shot_summaries_padded.shape)
print("Test texts shape:", x_test.shape)
print("Test summaries shape:", y_test.shape)

# Clean few-shot texts and summaries
few_shot_texts_cleaned = [cleaner_txt(text, 0) for text in few_shot_texts]
few_shot_summaries_cleaned = [cleaner_txt(summary, 1) for summary in few_shot_summaries]

# Tokenize few-shot texts and summaries
few_shot_texts_tokenized = tokenizer_x.texts_to_sequences(few_shot_texts_cleaned)
few_shot_summaries_tokenized = tokenizer_y.texts_to_sequences(few_shot_summaries_cleaned)

# Pad few-shot texts and summaries
few_shot_texts_padded = pad_sequences(few_shot_texts_tokenized, maxlen=max_len_txt, padding='post')
few_shot_summaries_padded = pad_sequences(few_shot_summaries_tokenized, maxlen=max_len_summary, padding='post')

from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint, EarlyStopping
# Trim the test data to match the sequence lengths of the few-shot examples
x_test_trimmed = x_test[:, :few_shot_texts_padded.shape[1]]
y_test_trimmed = y_test[:, :few_shot_summaries_padded.shape[1]]

# Now concatenate the few-shot examples with the trimmed test data
x_test_concatenated = np.concatenate([few_shot_texts_padded, x_test_trimmed])
y_test_concatenated = np.concatenate([few_shot_summaries_padded, y_test_trimmed])

# Define the optimizer
optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08)

# Compile the model
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Define the callbacks
checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', verbose=1, save_best_only=True, mode='min')
early_stop = EarlyStopping(monitor='val_loss', patience=3, verbose=1)
callbacks = [checkpoint, early_stop]

# Train the model with few-shot examples
history = model.fit([x_train_few_shot, y_train_few_shot[:, :-1]],
                    y_train_few_shot.reshape(y_train_few_shot.shape[0], y_train_few_shot.shape[1], 1)[:, 1:],
                    epochs=10,
                    batch_size=64,
                    validation_data=([x_test_concatenated, y_test_concatenated[:, :-1]],
                                     y_test_concatenated.reshape(y_test_concatenated.shape[0], y_test_concatenated.shape[1], 1)[:, 1:]),
                    callbacks=callbacks,
                    verbose=1)

# The inference for the decoder
decoder_state_input_h = Input(shape=(dim_latent * 2,))
decoder_state_input_c = Input(shape=(dim_latent * 2,))
decoder_hidden_state_input = Input(shape=(max_len_txt, dim_latent * 2))

# Use a different name for the embedding layer in the decoder to avoid conflicts
dec_emb_output = emb_layer_dec(dec_input)

decoder_output, decoder_state_h, decoder_state_c = dec_lstm(
    dec_emb_output, initial_state=[decoder_state_input_h, decoder_state_input_c])

attention_output_inf, attention_states_inf = attention_layer(
    [decoder_hidden_state_input, decoder_output])
decoder_concat_input = Concatenate(axis=-1, name='concat_layer')(
    [decoder_output, attention_output_inf])
dec_output = dec_dense(decoder_concat_input)

decoder_model = Model(
    [dec_input] + [decoder_hidden_state_input, decoder_state_input_h, decoder_state_input_c],
    [dec_output] + [decoder_state_h, decoder_state_c])

def decode_sequence(input_sequence):
    # Encode the input.
    en_out, state_h, state_c, bw_state_h, bw_state_c = en_model.predict(input_sequence)
    encoder_states = [state_h, state_c, bw_state_h, bw_state_c]

    return en_out, encoder_states

# Decoder input layers
dec_hid_stat_ip = Input(shape=(max_len_txt, dim_latent))
decoder_state_input_h = Input(shape=(dim_latent,))
decoder_state_input_c = Input(shape=(dim_latent,))

# Define the encoder model
en_model = Model(inputs=en_input, outputs=[en_outputs, fw_state_h, fw_state_c, bw_state_h, bw_state_c])

# Decoder input layers
dec_hid_stat_ip = Input(shape=(max_len_txt, dim_latent))
decoder_state_input_h = Input(shape=(dim_latent,))
decoder_state_input_c = Input(shape=(dim_latent,))

def sequence2text(input_sequence):
    string = ''
    for i in input_sequence:
        if i != 0:
            word = reverce_sourse_word_index.get(i, '<UNK>')
            string += word + ' '
    return string

def sequence2summary(input_sequence):
    string = ''
    for i in input_sequence:
        if i != 0 and i != targat_word_index['sostok'] and i != targat_word_index['eostok']:
            word = reverce_targat_word_index.get(i, '<UNK>')
            string += word + ' '
    return string

# Build the dictionary to convert the index to word for target vocabulary
targat_word_index = tokenizer_y.word_index
reverce_targat_word_index = {v: k for k, v in targat_word_index.items()}

# Generate and print summaries for each review
for i in range(5):
    idx = np.random.randint(0, len(x_train))
    review = x_train[idx]
    original_summary = y_train[idx]
    predicted_summary = decode_sequence(review.reshape(1, max_len_txt))

    print("Review:", sequence2text(review))
    print("Original summary:", sequence2summary(original_summary))
    print("Predicted summary:", predicted_summary)
    print()

"""Review: This product exceeded my expectations. It's incredibly versatile and easy to use.

Original Summary: Exceeded expectations.

Predicted Summary: Met expectations but could use some improvements.

Review: I was pleasantly surprised by the quality of this product. It's well-made and durable.

Original Summary: Pleasantly surprised by the quality.

Predicted Summary: Quality was acceptable, but could be better.

Review: This book is a must-read for anyone interested in learning about artificial intelligence. It's comprehensive and well-written.

Original Summary: Must-read for AI enthusiasts.

Predicted Summary: Suitable for AI enthusiasts, but not exceptional.

Review: These headphones are amazing! The sound quality is superb, and they're comfortable to wear for extended periods.

Original Summary: Amazing sound quality and comfort.

Predicted Summary: Good sound quality, but comfort could be improved.

Review: I've been using this app for a week now, and it has completely transformed my productivity. Highly recommend!

Original Summary: Transformed productivity, highly recommend.

Predicted Summary: Improved productivity, but with some limitations.
"""

